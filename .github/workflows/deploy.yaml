name: Microservices Deploy to EKS

on:
  push:
    branches: main
  pull_request:
    branches: main
  workflow_dispatch:
    

env:
  AWS_REGION: us-east-1
  IMAGE_TAG: ${{ github.sha }}
  CLUSTER_NAME: microservices-deploy-eks

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=microservices-deploy-eks
            -Dsonar.projectName=microservices-deploy-eks
            -Dsonar.java.binaries=.
            
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'microservices-deploy-eks'
          path: '.'
          format: 'HTML'
          
  build-images:
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        service: [adservice, cartservice, checkoutservice, currencyservice, emailservice, 
                 frontend, loadgenerator, paymentservice, productcatalogservice, 
                 recommendationservice, shippingservice]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v4
        with:
          context: ./src/${{ matrix.service }}${{ matrix.service == 'cartservice' && '/src/' || '/' }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-images
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
      - name: Update deployment manifest with new image tags
        run: |
          cd kubernetes-manifests
          for file in *service.yaml frontend.yaml loadgenerator.yaml; do
            sed -i "s|image: .*|image: ${{ secrets.DOCKERHUB_USERNAME }}/$(basename $file .yaml):${{ env.IMAGE_TAG }}|g" $file
          done
        
          - name: Deploy to Kubernetes
          run: |
            kubectl apply -f kubernetes-manifests/
            kubectl rollout status deployment/frontend -n microservices-deploy --timeout=300s
      
      - name: Verify deployment
        run: |
          kubectl get pods -n microservices-deploy
          kubectl get svc -n microservices-deploy
          
  post-deploy:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Run smoke tests
        run: |
          # Simple health check
          FRONTEND_IP=$(kubectl get svc frontend-external -n microservices-deploy -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -s -o /dev/null -w "%{http_code}" http://$FRONTEND_IP | grep 200
      
      - name: Send deployment notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "Deployment to ${{ github.event.inputs.environment || 'dev' }} completed successfully!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Microservices Demo Deployment Completed!*\nEnvironment: ${{ github.event.inputs.environment || 'dev' }}\nCommit: ${{ github.sha }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK